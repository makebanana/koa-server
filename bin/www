#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('demo:server');
const http = require('http');
const https = require('https');
// const enforceHttps = require('koa-sslify');
const cfile = require('../config');
const fs = require('fs');
const path = require('path');
const config = cfile[process.env.NODE_ENV || 'development'];
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port);
// app.set('port', port);

/**
 * Create HTTP server.
 */

// Force HTTPS on all page
// if (process.env.NODE_ENV === 'production') {
//   app.use(enforceHttps());
// }
const server = function (){
  if (process.env.NODE_ENV === 'production') {
    return https.createServer({
        key: fs.readFileSync(path.join(__dirname, '../../ssl/214534601590949.key')),  //ssl文件路径
        cert: fs.readFileSync(path.join(__dirname, '../../ssl/214534601590949.pem'))  //ssl文件路径
    }, app.callback());
  }
  return http.createServer(app.callback());
}();


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      throw new Error(bind + ' requires elevated privileges');
    case 'EADDRINUSE':
      throw new Error(bind + ' is already in use');
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
